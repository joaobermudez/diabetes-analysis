---->diabetes analysis<------- from kaggle notebook

# %% [code]
# This Python 3 environment comes with many helpful analytics libraries installed
# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python
# For example, here's several helpful packages to load

import numpy as np # linear algebra
import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv).

# Input data files are available in the read-only "../input/" directory
# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory

import os
for dirname, _, filenames in os.walk('/kaggle/input'):
    for filename in filenames:
        print(os.path.join(dirname, filename))

# You can write up to 5GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using "Save & Run All" 
# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session

# %% [code]
import matplotlib.pyplot as plt

# %% [code]
%matplotlib inline

# %% [code]
df=pd.read_csv('/kaggle/input/pima-indians-diabetes-database/diabetes.csv')

# %% [code]
df.head()

# %% [code]
df.shape

# %% [code]
df.isnull().any()

# %% [code]
import warnings
warnings.filterwarnings('ignore')
from mlxtend.plotting import plot_decision_regions

# %% [code]
import seaborn as sns 
import matplotlib.pyplot as plt
corrmat = df.corr()
top_corr_feature = corrmat.index
plt.figure(figsize=(20,20))
g=sns.heatmap(df[top_corr_feature].corr(),annot=True,cmap="Blues")

# %% [code]
df.corr()

# %% [code]
has_diabetes=len(df.loc[df['Outcome']==1])
DoNotHave_diabetes=len(df.loc[df['Outcome']==0])


# %% [code]
(has_diabetes,DoNotHave_diabetes)

# %% [code]
p=df.Outcome.value_counts().plot(kind="bar")

# %% [code]
df = df.copy(deep = True)
df[['Glucose','BloodPressure','SkinThickness','Insulin','BMI']] = df[['Glucose','BloodPressure','SkinThickness','Insulin','BMI']].replace(0,np.NaN)

# %% [code]
print(df.isnull().sum())

# %% [code]
df.describe().T

# %% [code]
p =df.hist(figsize = (20,20))

# %% [code]
df['Glucose'].fillna(df['Glucose'].mean(), inplace = True)
df['BloodPressure'].fillna(df['BloodPressure'].mean(), inplace = True)
df['SkinThickness'].fillna(df['SkinThickness'].median(), inplace = True)
df['Insulin'].fillna(df['Insulin'].median(), inplace = True)
df['BMI'].fillna(df['BMI'].median(), inplace = True)

# %% [code]
p = df.hist(figsize = (20,20))

# %% [code]
df.dtypes

# %% [code]
df['Pregnancies'] = df['Pregnancies'].astype(float)

# %% [code]
df.dtypes

# %% [code]
plt.figure(figsize=(20,10))
sns.set(font_scale=1)
sns.countplot(y="Age",data=df)
plt.xlabel("count of each age year")
plt.ylabel("age")
plt.show()

# %% [code]
import missingno as msno
p=msno.bar(df)

# %% [code]
p=sns.pairplot(df, hue = 'Outcome')

# %% [code]
from sklearn.preprocessing import StandardScaler
sc_X = StandardScaler()
X =  pd.DataFrame(sc_X.fit_transform(df.drop(["Outcome"],axis = 1),),
        columns=['Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness', 'Insulin',
       'BMI', 'DiabetesPedigreeFunction', 'Age'])

# %% [code]
y = df.Outcome

# %% [code]
X.head()

# %% [code]
from sklearn.model_selection import train_test_split
X_train,X_test,y_train,y_test = train_test_split(X,y,test_size=1/3,random_state=42, stratify=y)

# %% [code]
from sklearn.neighbors import KNeighborsClassifier


test_scores = []
train_scores = []

for i in range(1,15):

    knn = KNeighborsClassifier(i)
    knn.fit(X_train,y_train)
    
    train_scores.append(knn.score(X_train,y_train))
    test_scores.append(knn.score(X_test,y_test))

# %% [code]
max_train_score = max(train_scores)
train_scores_ind = [i for i, v in enumerate(train_scores) if v == max_train_score]
print('Max train score {} % and k = {}'.format(max_train_score*100,list(map(lambda x: x+1, train_scores_ind))))

# %% [code]
max_test_score = max(test_scores)
test_scores_ind = [i for i, v in enumerate(test_scores) if v == max_test_score]
print('Max test score {} % and k = {}'.format(max_test_score*100,list(map(lambda x: x+1, test_scores_ind))))

# %% [code]
plt.figure(figsize=(12,5))
p = sns.lineplot(range(1,15),train_scores,marker='*',label='Train Score')
p = sns.lineplot(range(1,15),test_scores,marker='o',label='Test Score')

# %% [code]
knn = KNeighborsClassifier(11)

knn.fit(X_train,y_train)
knn.score(X_test,y_test)

# %% [code]
value = 30000
width = 30000
plot_decision_regions(X.values, y.values, clf=knn, legend=2, 
                      filler_feature_values={2: value, 3: value, 4: value, 5: value, 6: value, 7: value},
                      filler_feature_ranges={2: width, 3: width, 4: width, 5: width, 6: width, 7: width},
                      X_highlight=X_test.values)

plt.title('KNN with Diabetes Data')
plt.show()

# %% [code]
from sklearn.metrics import confusion_matrix
y_pred = knn.predict(X_test)
confusion_matrix(y_test,y_pred)
pd.crosstab(y_test, y_pred, rownames=['True'], colnames=['Predicted'], margins=True)

# %% [code]
y_pred = knn.predict(X_test)
from sklearn import metrics
cnf_matrix = metrics.confusion_matrix(y_test, y_pred)
p = sns.heatmap(pd.DataFrame(cnf_matrix), annot=True, cmap="YlGnBu" ,fmt='g')
plt.title('Confusion matrix', y=1.1)
plt.ylabel('Actual label')
plt.xlabel('Predicted label')

# %% [code]
from sklearn.metrics import classification_report
print(classification_report(y_test,y_pred))

# %% [code]
from sklearn.metrics import roc_curve
y_pred_proba = knn.predict_proba(X_test)[:,1]
fpr, tpr, thresholds = roc_curve(y_test, y_pred_proba)

# %% [code]
plt.plot([0,1],[0,1],'k--')
plt.plot(fpr,tpr, label='Knn')
plt.xlabel('fpr')
plt.ylabel('tpr')
plt.title('Knn(n_neighbors=11) ROC curve')
plt.show()

# %% [code]
from sklearn.metrics import roc_auc_score
roc_auc_score(y_test,y_pred_proba)

# %% [code]
from sklearn.model_selection import GridSearchCV
param_grid = {'n_neighbors':np.arange(1,75)}
knn = KNeighborsClassifier()
knn_cv= GridSearchCV(knn,param_grid,cv=5)
knn_cv.fit(X,y)
print("Best Score:" + str(knn_cv.best_score_))
print("Best Parameters: " + str(knn_cv.best_params_))
